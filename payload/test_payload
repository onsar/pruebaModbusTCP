#!/usr/bin/env python
from pymodbus.client.sync import ModbusTcpClient as ModbusClient
from pymodbus.constants import Endian
from pymodbus.payload import BinaryPayloadDecoder


cli = ModbusClient('192.168.1.133', port=5020)
#cli = ModbusClient('192.168.1.131', port=5020)
#cli = ModbusClient('192.168.1.133', port=5020)
#cli = ModbusClient('192.168.1.101', port=502)
assert cli.connect()

# AC Power value
res1 = cli.read_holding_registers(40091, count=2, unit=1)
assert not res1.isError()

decoder = BinaryPayloadDecoder.fromRegisters(res1.registers,
                                             byteorder=Endian.Big,
                                             wordorder=Endian.Big)
decoded = decoder.decode_32bit_float()
#decoded = decoder.decode_16bit_uint()
#decoded = decoder.decode_32bit_int()

print("-" * 4 + " AC Power value")
print("%.2f" % decoded)
print("-" * 2 + " Registros")
print(res1.registers)

# Apparent Power
res1 = cli.read_holding_registers(40095, count=2, unit=1)
assert not res1.isError()

decoder = BinaryPayloadDecoder.fromRegisters(res1.registers,
                                             byteorder=Endian.Big,
                                             wordorder=Endian.Big)
decoded = decoder.decode_32bit_float()
print("-" * 4 + " Apparent Power")
print("%.2f" % decoded)
print("-" * 2 + " Registros")
print(res1.registers)

# Reactive Power
res1 = cli.read_holding_registers(40097, count=2, unit=1)
assert not res1.isError()

decoder = BinaryPayloadDecoder.fromRegisters(res1.registers,
                                             byteorder=Endian.Big,
                                             wordorder=Endian.Big)
decoded = decoder.decode_32bit_float()
#decoded = decoder.decode_16bit_uint()
#decoded = decoder.decode_32bit_int()
print("-" * 4 + " Reactiva")
print("%.2f" % decoded)
print("-" * 2 + " Registros")
print(res1.registers)

# AC Lifetime Energy production
res1 = cli.read_holding_registers(40101, count=2, unit=1)
assert not res1.isError()

decoder = BinaryPayloadDecoder.fromRegisters(res1.registers,
                                             byteorder=Endian.Big,
                                             wordorder=Endian.Big)
decoded = decoder.decode_32bit_float()
print("-" * 4 + " AC Lifetime Energy production")
print("%.2f" % decoded)
print("-" * 2 + " Registros")
print(res1.registers)

# DC Power value
res1 = cli.read_holding_registers(40107, count=2, unit=1)
assert not res1.isError()

decoder = BinaryPayloadDecoder.fromRegisters(res1.registers,
                                             byteorder=Endian.Big,
                                             wordorder=Endian.Big)
decoded = decoder.decode_32bit_float()
print("-" * 4 + "DC Power value")
print("%.2f" % decoded)
print("-" * 2 + " Registros")
print(res1.registers)

#  SunSpec Modbus Map
res1 = cli.read_holding_registers(40000, count=2, unit=1)
assert not res1.isError()

decoder = BinaryPayloadDecoder.fromRegisters(res1.registers,
                                             byteorder=Endian.Big,
                                             wordorder=Endian.Big)
decoded = decoder.decode_32bit_uint()
print("-" * 4 + "SunSpec Modbus Map" )
print(decoded)
print("-" * 2 + " Registros")
print(res1.registers)

#!/usr/bin/env python
from pymodbus.client.sync import ModbusTcpClient as ModbusClient
from pymodbus.constants import Endian
from pymodbus.payload import BinaryPayloadDecoder

import configparser

#################################
# Parseo de variables del .ini
#################################

parser = configparser.ConfigParser()
parser.read('config.ini')

# Lista para incluir los servidores
servers_list=[]
# Lista para incluir los registros
registers_list=[]
# Lista de registros ordenados por sservidor
# [[aa,ab,ac],[ba,bb,bc],[ca,cb,cc],[da,db,dc]]
server_register_list=[]
# Lista de valores de lo registros ordenados por sservidor
# [[aa,ab,ac],[ba,bb,bc],[ca,cb,cc],[da,db,dc]]
server_values_list=[]

# devuelve una list con todas las secciones
sections = parser.sections()

# Listas separadas de servidores y registros
for section in sections:
    if parser.has_option(section,'url'):
        servers_list.append(section)
    if parser.has_option(section,'server'):
        registers_list.append(section)


###########################################
# Uso de ini para la lectura de registros
###########################################

# Reactive Power
# https://es.wikipedia.org/wiki/Printf
# https://stackoverflow.com/questions/19122345/convert-string-to-variable-name-in-python

tx_server = 'fronius'
tx_register = 'fr_rew'
position = int(parser.get(tx_register,'start'))
tx_count = int(parser.get(tx_register,'registers'))
tx_unit = int(parser.get(tx_server,'unit'))
st_byteorder = parser.get(tx_server,'byteorder')
exec("tx_byteorder = %s" % (st_byteorder))
st_wordorder = parser.get(tx_server,'wordorder')
exec("tx_wordorder = %s" % (st_wordorder))


# Registros de cada servidor
for server in servers_list:
    registers_temp_list=[]
    values_temp_list=[]
    for register in registers_list:
        if server == parser.get(register,'server'):
            registers_temp_list.append(register)
            # Lista para guardar los resultados
            values_temp_list.append('3')
    server_register_list.append(registers_temp_list)
    server_values_list.append(values_temp_list)
print("*" * 4 + ' Servidores')
print(servers_list)
print("*" * 4 + ' Registros agrupados por servidor')
print(server_register_list)


print("*" * 4 + ' Recorremos servidores y sus registros')
for s in range(len(servers_list)):
    tx_server = servers_list[s]
    tx_url = parser.get(tx_server,'url')
    tx_port = parser.get(tx_server,'port')
    cli = ModbusClient(tx_url, port=tx_port)
    print('------ ' + tx_server)
    connexion = True
    try:
        assert cli.connect()
    except Exception:
        print("error en la conexi√≥n al cliente")
        connexion = False

    if  connexion == True:
        for r in range(len(server_register_list[s])):
            # Preguntamos los valores de cada variable del servidor
            tx_register = server_register_list[s][r]

            print('---- ' + tx_register)
            position = int(parser.get(tx_register,'start'))
            tx_count = int(parser.get(tx_register,'registers'))
            tx_unit = int(parser.get(tx_server,'unit'))
            st_byteorder = parser.get(tx_server,'byteorder')
            exec("tx_byteorder = %s" % (st_byteorder))
            st_wordorder = parser.get(tx_server,'wordorder')
            exec("tx_wordorder = %s" % (st_wordorder))
            
            try:
                res1 = cli.read_holding_registers(position, count=tx_count, unit=tx_unit)
                decoder = BinaryPayloadDecoder.fromRegisters(res1.registers,
                                                             byteorder= tx_byteorder,
                                                             wordorder= tx_wordorder)
                st_tipe = "decoder.decode_" + parser.get(tx_register,'tipe') + "()"
                exec("decoded = %s" % (st_tipe))
                print(st_tipe)
                print("%.2f" % decoded)
                print("registros")
                print(res1.registers)

            except Exception:
                print("error al leer el registro: " + tx_register)
                continue
